#include<bits/stdc++.h>
#define boost() cin.tie(0); cin.sync_with_stdio(0);
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
#define REP(i, N) for(int i = 0; i < N; ++i)
#define ms(a,b) memset(a,b,sizeof(a));
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define s second
#define f first
char _;
void scana(){}template<class T, class...A> void scana(T&t, A&...a) { scan(t); scana(a...); }
typedef  unsigned long long ull;
typedef long long ll;
typedef long double ld;
const ll MM = 2e3+10;
using namespace std;
int N, M, S, F, k[MM], L, R, idx = -1, cur, cnt = 0; bool b[MM][MM];
// goes from reindeer i to k[i];
// find a path of length l<= len <= r that ends with F
// idk maybe just find the latest k that k[i] == F?
int main()
{
    boost();
    cin>>N>>M>>S>>F>>L>>R; cur = S;
    for(int i = 1; i <= M; ++i){
        cin>>k[i];
        if(k[i] == F) idx = i;
    }
    if(R == 0 && S != F){ cout<<-1<<endl; return 0; }
    for(int i = 1; i <= M; ++i) {
        if(i < idx && cnt < R - 1) {
            for(int j = 1; j <= N; ++j) {
                if(cnt == R - 1) break;
                ++cnt; b[j][i] = 1;
                if(j == cur) cur = k[i];
            }
        }
        else if(i == idx && cnt < R) {
            for(int j = 1; j <= N; ++j) {
                if(j == cur) continue;
                if(cnt == R - 1) break;
                ++cnt; b[j][i] = 1;
                if(j == cur) cur = k[i];
            }
            ++cnt; b[cur][i] = 1; cur = k[i];
        }
        else if(i > idx && cnt < L) {
            for(int j = 1; j <= N; ++j) {
                if(cnt == R) break;
                if(j == cur) continue;
                ++cnt; b[j][i] = 1;
            }
        }
    }
    if(cnt < L || cur != F){ cout<<-1<<endl; return 0; }
    cout<<cnt<<endl;
    for(int i = 1; i <= N; ++i) {
        for(int j = 1; j < M; ++j) {
            cout<<b[i][j]<<" ";
        }
        cout<<b[i][M]<<endl;
    }
    return 0;
}